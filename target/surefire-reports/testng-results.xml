<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="36" passed="36" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-09-30T09:32:57 EEST" name="Surefire suite" finished-at="2021-09-30T09:33:13 EEST" duration-ms="16666">
    <groups>
    </groups>
    <test started-at="2021-09-30T09:32:57 EEST" name="Surefire test" finished-at="2021-09-30T09:33:13 EEST" duration-ms="16666">
      <class name="bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest">
        <test-method is-config="true" signature="springTestContextBeforeTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextBeforeTestClass" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method is-config="true" signature="springTestContextPrepareTestInstance()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextPrepareTestInstance" finished-at="2021-09-30T09:33:12 EEST" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.createGossip_returnCreatedWithHtmlEscaped_IfGossipIsValid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="setUp" finished-at="2021-09-30T09:33:12 EEST" duration-ms="212" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="createGossip_returnCreatedWithHtmlEscaped_IfGossipIsValid()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="createGossip_returnCreatedWithHtmlEscaped_IfGossipIsValid" finished-at="2021-09-30T09:33:12 EEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createGossip_returnCreatedWithHtmlEscaped_IfGossipIsValid -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="tearDown" finished-at="2021-09-30T09:33:12 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.createGossip_returnCreatedWithHtmlEscaped_IfGossipIsValid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.createGossip_returnError_IfGossipIsBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="setUp" finished-at="2021-09-30T09:33:12 EEST" duration-ms="198" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="createGossip_returnError_IfGossipIsBlank()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="createGossip_returnError_IfGossipIsBlank" finished-at="2021-09-30T09:33:12 EEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createGossip_returnError_IfGossipIsBlank -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="tearDown" finished-at="2021-09-30T09:33:12 EEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.createGossip_returnError_IfGossipIsBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.getUserGossips_returnErrorNotFound_IfInvalidUsername() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:12 EEST" name="setUp" finished-at="2021-09-30T09:33:13 EEST" duration-ms="197" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="getUserGossips_returnErrorNotFound_IfInvalidUsername()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="getUserGossips_returnErrorNotFound_IfInvalidUsername" finished-at="2021-09-30T09:33:13 EEST" duration-ms="34" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUserGossips_returnErrorNotFound_IfInvalidUsername -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="tearDown" finished-at="2021-09-30T09:33:13 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:13 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.getUserGossips_returnErrorNotFound_IfInvalidUsername() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:13 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.getUserGossips_returnGossips_IfValidUsername() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="setUp" finished-at="2021-09-30T09:33:13 EEST" duration-ms="203" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="getUserGossips_returnGossips_IfValidUsername()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="getUserGossips_returnGossips_IfValidUsername" finished-at="2021-09-30T09:33:13 EEST" duration-ms="102" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUserGossips_returnGossips_IfValidUsername -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="tearDown" finished-at="2021-09-30T09:33:13 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:13 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.getUserGossips_returnGossips_IfValidUsername() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:13 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.readAllGossips_returnContent_IfValid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="setUp" finished-at="2021-09-30T09:33:13 EEST" duration-ms="198" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="readAllGossips_returnContent_IfValid()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="readAllGossips_returnContent_IfValid" finished-at="2021-09-30T09:33:13 EEST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- readAllGossips_returnContent_IfValid -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="tearDown" finished-at="2021-09-30T09:33:13 EEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:13 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.readAllGossips_returnContent_IfValid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:13 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.readAllGossips_returnEmpty_IfFollowNoOne() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="setUp" finished-at="2021-09-30T09:33:13 EEST" duration-ms="198" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="readAllGossips_returnEmpty_IfFollowNoOne()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="readAllGossips_returnEmpty_IfFollowNoOne" finished-at="2021-09-30T09:33:13 EEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- readAllGossips_returnEmpty_IfFollowNoOne -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="tearDown" finished-at="2021-09-30T09:33:13 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="springTestContextAfterTestClass" finished-at="2021-09-30T09:33:13 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest@48528634]" started-at="2021-09-30T09:33:13 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:13 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest.readAllGossips_returnEmpty_IfFollowNoOne() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- bg.codeacademy.spring.gossiptalks.controller.GossipControllerTest -->
      <class name="bg.codeacademy.spring.gossiptalks.validation.StrongPasswordValidatorTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.validation.StrongPasswordValidatorTest@7add323c]" started-at="2021-09-30T09:33:13 EEST" name="setUp" finished-at="2021-09-30T09:33:13 EEST" duration-ms="66" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="given_null_When_validate_Then_false()[pri:0, instance:bg.codeacademy.spring.gossiptalks.validation.StrongPasswordValidatorTest@7add323c]" started-at="2021-09-30T09:33:13 EEST" name="given_null_When_validate_Then_false" finished-at="2021-09-30T09:33:13 EEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- given_null_When_validate_Then_false -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.validation.StrongPasswordValidatorTest@7add323c]" started-at="2021-09-30T09:33:13 EEST" name="setUp" finished-at="2021-09-30T09:33:13 EEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="given_short_password_When_validating_Then_false()[pri:0, instance:bg.codeacademy.spring.gossiptalks.validation.StrongPasswordValidatorTest@7add323c]" started-at="2021-09-30T09:33:13 EEST" name="given_short_password_When_validating_Then_false" finished-at="2021-09-30T09:33:13 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- given_short_password_When_validating_Then_false -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.validation.StrongPasswordValidatorTest@7add323c]" started-at="2021-09-30T09:33:13 EEST" name="setUp" finished-at="2021-09-30T09:33:13 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="given_valid_password_When_validating_Then_true()[pri:0, instance:bg.codeacademy.spring.gossiptalks.validation.StrongPasswordValidatorTest@7add323c]" started-at="2021-09-30T09:33:13 EEST" name="given_valid_password_When_validating_Then_true" finished-at="2021-09-30T09:33:13 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- given_valid_password_When_validating_Then_true -->
      </class> <!-- bg.codeacademy.spring.gossiptalks.validation.StrongPasswordValidatorTest -->
      <class name="bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest">
        <test-method is-config="true" signature="springTestContextBeforeTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestClass" finished-at="2021-09-30T09:32:59 EEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method is-config="true" signature="springTestContextPrepareTestInstance()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextPrepareTestInstance" finished-at="2021-09-30T09:32:59 EEST" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.changePassword_Failure_NewPasswordsDoNotMatch()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="423" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="changePassword_Failure_NewPasswordsDoNotMatch()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="changePassword_Failure_NewPasswordsDoNotMatch" finished-at="2021-09-30T09:32:59 EEST" duration-ms="14" status="PASS">
          <exception class="bg.codeacademy.spring.gossiptalks.exception.PasswordsDoNotMatchException">
            <message>
              <![CDATA[Passwords do not match!]]>
            </message>
            <full-stacktrace>
              <![CDATA[bg.codeacademy.spring.gossiptalks.exception.PasswordsDoNotMatchException: Passwords do not match!
at bg.codeacademy.spring.gossiptalks.service.UserServiceImp.changePassword(UserServiceImp.java:61)
at bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.changePassword_Failure_NewPasswordsDoNotMatch(UserServiceImpTest.java:161)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:239)
at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:181)
at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:253)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:594)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- bg.codeacademy.spring.gossiptalks.exception.PasswordsDoNotMatchException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- changePassword_Failure_NewPasswordsDoNotMatch -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.changePassword_Failure_NewPasswordsDoNotMatch()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.changePassword_Failure_PasswordsAreNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="changePassword_Failure_PasswordsAreNull()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="changePassword_Failure_PasswordsAreNull" finished-at="2021-09-30T09:32:59 EEST" duration-ms="6" status="PASS">
          <exception class="bg.codeacademy.spring.gossiptalks.exception.PasswordsDoNotMatchException">
            <message>
              <![CDATA[Not your current password!]]>
            </message>
            <full-stacktrace>
              <![CDATA[bg.codeacademy.spring.gossiptalks.exception.PasswordsDoNotMatchException: Not your current password!
at bg.codeacademy.spring.gossiptalks.service.UserServiceImp.changePassword(UserServiceImp.java:67)
at bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.changePassword_Failure_PasswordsAreNull(UserServiceImpTest.java:148)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:239)
at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:181)
at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:253)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:594)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- bg.codeacademy.spring.gossiptalks.exception.PasswordsDoNotMatchException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- changePassword_Failure_PasswordsAreNull -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.changePassword_Failure_PasswordsAreNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.listUsers_ReturnAll_IfNameNotNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="listUsers_ReturnAll_IfNameNotNull()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="listUsers_ReturnAll_IfNameNotNull" finished-at="2021-09-30T09:32:59 EEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listUsers_ReturnAll_IfNameNotNull -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.listUsers_ReturnAll_IfNameNotNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.listUsers_ReturnAll_IfNoParams()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="listUsers_ReturnAll_IfNoParams()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="listUsers_ReturnAll_IfNoParams" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listUsers_ReturnAll_IfNoParams -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.listUsers_ReturnAll_IfNoParams()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.listUsers_ReturnFollowing_IfFisTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="listUsers_ReturnFollowing_IfFisTrue()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="listUsers_ReturnFollowing_IfFisTrue" finished-at="2021-09-30T09:32:59 EEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listUsers_ReturnFollowing_IfFisTrue -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.listUsers_ReturnFollowing_IfFisTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.listUsers_ReturnFollowing_IfFisTrueAndNameNotNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="listUsers_ReturnFollowing_IfFisTrueAndNameNotNull()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="listUsers_ReturnFollowing_IfFisTrueAndNameNotNull" finished-at="2021-09-30T09:32:59 EEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listUsers_ReturnFollowing_IfFisTrueAndNameNotNull -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.listUsers_ReturnFollowing_IfFisTrueAndNameNotNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.registerAccount_Failure_EmailExists()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="registerAccount_Failure_EmailExists()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="registerAccount_Failure_EmailExists" finished-at="2021-09-30T09:32:59 EEST" duration-ms="3" status="PASS">
          <exception class="bg.codeacademy.spring.gossiptalks.exception.UserAlreadyExistsException">
            <message>
              <![CDATA[Failed - the user already exists.]]>
            </message>
            <full-stacktrace>
              <![CDATA[bg.codeacademy.spring.gossiptalks.exception.UserAlreadyExistsException: Failed - the user already exists.
at bg.codeacademy.spring.gossiptalks.service.UserServiceImp.registerAccount(UserServiceImp.java:41)
at bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.registerAccount_Failure_EmailExists(UserServiceImpTest.java:110)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:239)
at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:181)
at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:253)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:594)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- bg.codeacademy.spring.gossiptalks.exception.UserAlreadyExistsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccount_Failure_EmailExists -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.registerAccount_Failure_EmailExists()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.registerAccount_Failure_PasswordsDoNotMatch()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="registerAccount_Failure_PasswordsDoNotMatch()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="registerAccount_Failure_PasswordsDoNotMatch" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <exception class="bg.codeacademy.spring.gossiptalks.exception.PasswordsDoNotMatchException">
            <message>
              <![CDATA[Passwords do not match!]]>
            </message>
            <full-stacktrace>
              <![CDATA[bg.codeacademy.spring.gossiptalks.exception.PasswordsDoNotMatchException: Passwords do not match!
at bg.codeacademy.spring.gossiptalks.service.UserServiceImp.registerAccount(UserServiceImp.java:45)
at bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.registerAccount_Failure_PasswordsDoNotMatch(UserServiceImpTest.java:120)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:239)
at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:181)
at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:253)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:594)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- bg.codeacademy.spring.gossiptalks.exception.PasswordsDoNotMatchException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccount_Failure_PasswordsDoNotMatch -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.registerAccount_Failure_PasswordsDoNotMatch()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.registerAccount_Success()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="registerAccount_Success()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="registerAccount_Success" finished-at="2021-09-30T09:32:59 EEST" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerAccount_Success -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest.registerAccount_Success()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextAfterTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest@332f25c8]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestClass" finished-at="2021-09-30T09:32:59 EEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- bg.codeacademy.spring.gossiptalks.service.UserServiceImpTest -->
      <class name="bg.codeacademy.spring.gossiptalks.controller.UserControllerTest">
        <test-method is-config="true" signature="springTestContextBeforeTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestClass" finished-at="2021-09-30T09:32:59 EEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method is-config="true" signature="springTestContextPrepareTestInstance()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextPrepareTestInstance" finished-at="2021-09-30T09:33:10 EEST" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" duration-ms="10906" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:10 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:10 EEST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.followUser_returnError_ifFTrueAndUserIsCurrent() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:10 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="followUser_returnError_ifFTrueAndUserIsCurrent()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="followUser_returnError_ifFTrueAndUserIsCurrent" finished-at="2021-09-30T09:33:11 EEST" duration-ms="215" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- followUser_returnError_ifFTrueAndUserIsCurrent -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="tearDown" finished-at="2021-09-30T09:33:11 EEST" duration-ms="51" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.followUser_returnError_ifFTrueAndUserIsCurrent() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.followUser_returnFollowingFalse_ifFFalse() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="followUser_returnFollowingFalse_ifFFalse()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="followUser_returnFollowingFalse_ifFFalse" finished-at="2021-09-30T09:33:11 EEST" duration-ms="97" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- followUser_returnFollowingFalse_ifFFalse -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="tearDown" finished-at="2021-09-30T09:33:11 EEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.followUser_returnFollowingFalse_ifFFalse() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.followUser_returnSame_ifFTrueAndIsAlreadySubscribed() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="followUser_returnSame_ifFTrueAndIsAlreadySubscribed()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="followUser_returnSame_ifFTrueAndIsAlreadySubscribed" finished-at="2021-09-30T09:33:11 EEST" duration-ms="59" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- followUser_returnSame_ifFTrueAndIsAlreadySubscribed -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="tearDown" finished-at="2021-09-30T09:33:11 EEST" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.followUser_returnSame_ifFTrueAndIsAlreadySubscribed() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.followUser_returnSuccess_ifFTrue() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="followUser_returnSuccess_ifFTrue()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="followUser_returnSuccess_ifFTrue" finished-at="2021-09-30T09:33:11 EEST" duration-ms="25" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- followUser_returnSuccess_ifFTrue -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="tearDown" finished-at="2021-09-30T09:33:11 EEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.followUser_returnSuccess_ifFTrue() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.getCurrentUser_returnError_ifIsUnauthorized() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="getCurrentUser_returnError_ifIsUnauthorized()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="getCurrentUser_returnError_ifIsUnauthorized" finished-at="2021-09-30T09:33:11 EEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentUser_returnError_ifIsUnauthorized -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="tearDown" finished-at="2021-09-30T09:33:11 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.getCurrentUser_returnError_ifIsUnauthorized() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.getCurrentUser_returnUser_ifIsAuthenticated() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="getCurrentUser_returnUser_ifIsAuthenticated()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="getCurrentUser_returnUser_ifIsAuthenticated" finished-at="2021-09-30T09:33:11 EEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentUser_returnUser_ifIsAuthenticated -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="tearDown" finished-at="2021-09-30T09:33:11 EEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.getCurrentUser_returnUser_ifIsAuthenticated() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUserFollowing_returnOk_ifUserIsLoggedIn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="listUserFollowing_returnOk_ifUserIsLoggedIn()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="listUserFollowing_returnOk_ifUserIsLoggedIn" finished-at="2021-09-30T09:33:11 EEST" duration-ms="76" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listUserFollowing_returnOk_ifUserIsLoggedIn -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="tearDown" finished-at="2021-09-30T09:33:11 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUserFollowing_returnOk_ifUserIsLoggedIn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUserNameSearchFollowing_returnOk_ifUserIsLoggedIn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="listUserNameSearchFollowing_returnOk_ifUserIsLoggedIn()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="listUserNameSearchFollowing_returnOk_ifUserIsLoggedIn" finished-at="2021-09-30T09:33:11 EEST" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listUserNameSearchFollowing_returnOk_ifUserIsLoggedIn -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="tearDown" finished-at="2021-09-30T09:33:11 EEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUserNameSearchFollowing_returnOk_ifUserIsLoggedIn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUserNameSearch_returnOk_ifUserIsLoggedIn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="listUserNameSearch_returnOk_ifUserIsLoggedIn()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="listUserNameSearch_returnOk_ifUserIsLoggedIn" finished-at="2021-09-30T09:33:11 EEST" duration-ms="33" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listUserNameSearch_returnOk_ifUserIsLoggedIn -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="tearDown" finished-at="2021-09-30T09:33:11 EEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUserNameSearch_returnOk_ifUserIsLoggedIn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:11 EEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUsers_returnOk_ifUserIsLoggedIn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="setUp" finished-at="2021-09-30T09:33:11 EEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="listUsers_returnOk_ifUserIsLoggedIn()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:11 EEST" name="listUsers_returnOk_ifUserIsLoggedIn" finished-at="2021-09-30T09:33:12 EEST" duration-ms="27" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listUsers_returnOk_ifUserIsLoggedIn -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="tearDown" finished-at="2021-09-30T09:33:12 EEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUsers_returnOk_ifUserIsLoggedIn() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUsers_returnUnauthorized_ifNoLoggedUser() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="setUp" finished-at="2021-09-30T09:33:12 EEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="listUsers_returnUnauthorized_ifNoLoggedUser()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="listUsers_returnUnauthorized_ifNoLoggedUser" finished-at="2021-09-30T09:33:12 EEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listUsers_returnUnauthorized_ifNoLoggedUser -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="tearDown" finished-at="2021-09-30T09:33:12 EEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.listUsers_returnUnauthorized_ifNoLoggedUser() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.registerUser_returnBadRequest_ifAreNotValidUserFields() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="setUp" finished-at="2021-09-30T09:33:12 EEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="registerUser_returnBadRequest_ifAreNotValidUserFields()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="registerUser_returnBadRequest_ifAreNotValidUserFields" finished-at="2021-09-30T09:33:12 EEST" duration-ms="85" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_returnBadRequest_ifAreNotValidUserFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="tearDown" finished-at="2021-09-30T09:33:12 EEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.registerUser_returnBadRequest_ifAreNotValidUserFields() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.registerUser_returnCreated_ifIsAnonymous() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="setUp" finished-at="2021-09-30T09:33:12 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="registerUser_returnCreated_ifIsAnonymous()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="registerUser_returnCreated_ifIsAnonymous" finished-at="2021-09-30T09:33:12 EEST" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_returnCreated_ifIsAnonymous -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="tearDown" finished-at="2021-09-30T09:33:12 EEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.registerUser_returnCreated_ifIsAnonymous() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.registerUser_returnFailed_ifIsAlreadyRegistered() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="setUp" finished-at="2021-09-30T09:33:12 EEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="registerUser_returnFailed_ifIsAlreadyRegistered()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="registerUser_returnFailed_ifIsAlreadyRegistered" finished-at="2021-09-30T09:33:12 EEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_returnFailed_ifIsAlreadyRegistered -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="tearDown" finished-at="2021-09-30T09:33:12 EEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.registerUser_returnFailed_ifIsAlreadyRegistered() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.registerUser_returnPasswordDoesntMatch_ifPasswordDoesntMatch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="setUp" finished-at="2021-09-30T09:33:12 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="registerUser_returnPasswordDoesntMatch_ifPasswordDoesntMatch()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="registerUser_returnPasswordDoesntMatch_ifPasswordDoesntMatch" finished-at="2021-09-30T09:33:12 EEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_returnPasswordDoesntMatch_ifPasswordDoesntMatch -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="tearDown" finished-at="2021-09-30T09:33:12 EEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:33:12 EEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controller.UserControllerTest.registerUser_returnPasswordDoesntMatch_ifPasswordDoesntMatch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextAfterTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controller.UserControllerTest@2d9dff65]" started-at="2021-09-30T09:33:12 EEST" name="springTestContextAfterTestClass" finished-at="2021-09-30T09:33:12 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- bg.codeacademy.spring.gossiptalks.controller.UserControllerTest -->
      <class name="bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest">
        <test-method is-config="true" signature="springTestContextBeforeTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:57 EEST" name="springTestContextBeforeTestClass" finished-at="2021-09-30T09:32:57 EEST" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method is-config="true" signature="springTestContextPrepareTestInstance()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:57 EEST" name="springTestContextPrepareTestInstance" finished-at="2021-09-30T09:32:57 EEST" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" duration-ms="388" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:57 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:57 EEST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[void bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest.createGossip_Success()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:57 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1197" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="createGossip_Success()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="createGossip_Success" finished-at="2021-09-30T09:32:59 EEST" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createGossip_Success -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[void bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest.createGossip_Success()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[void bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest.getAllSubscriberGossips_Success()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="getAllSubscriberGossips_Success()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="getAllSubscriberGossips_Success" finished-at="2021-09-30T09:32:59 EEST" duration-ms="63" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSubscriberGossips_Success -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[void bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest.getAllSubscriberGossips_Success()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextBeforeTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[void bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest.getByUser_Success()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="setUp" finished-at="2021-09-30T09:32:59 EEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="getByUser_Success()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="getByUser_Success" finished-at="2021-09-30T09:32:59 EEST" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getByUser_Success -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestMethod" finished-at="2021-09-30T09:32:59 EEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[void bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest.getByUser_Success()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextAfterTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest@6a84bc2a]" started-at="2021-09-30T09:32:59 EEST" name="springTestContextAfterTestClass" finished-at="2021-09-30T09:32:59 EEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- bg.codeacademy.spring.gossiptalks.service.GossipServiceImpTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
